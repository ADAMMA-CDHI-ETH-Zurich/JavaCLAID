#include "JavaWrapper/JNIUtils.hpp"
#include "PortAIbleCore/RunTime/RunTime.hpp"
#include "PortAIbleCore/Channel/Channel.hpp"

#include "PortAIble/Audio/AudioData.hpp"
#include "PortAIbleCore/Logger/Logger.hpp"
#include "JavaWrapper/Wrapper.hpp"
using namespace claid;
using namespace claid::JavaWrapper;


/*
jobject publish(JNIEnv* env, std::string channelID)
{
    Channel<AudioData>* channel = new Channel<AudioData>;
    *channel = PORTAIBLE_RUNTIME->channelManager.publish<AudioData>(channelID);
    // Create new java object of type channel, set handle to channel..

    jclass cls = env->FindClass((std::string(Signatures::Class::Channel)).c_str());

    if(cls == nullptr)
    {
        PORTAIBLE_THROW(Exception, "Cannot publish, failed to lookup channel class " << Signatures::Class::Channel);
    }

    jmethodID constructor = env->GetMethodID(cls, "<init>", "()V");

    if(constructor == nullptr)
    {
        PORTAIBLE_THROW(Exception, "Cannot publish, failed to lookup constructor for channel class " << Signatures::Class::Channel);
    }

    jobject channelObject = env->NewObject(cls, constructor);

    if(channelObject == nullptr)
    {
        PORTAIBLE_THROW(Exception, "Cannot publish, to create channel object " << Signatures::Class::Channel);
    }

    JNIHandle::setHandle(env, channelObject, channel);

    return channelObject;
}*/

void post(JNIEnv* env, jobject jchannel, jobject jdata)
{
            Logger::printfln("Invoking post method 3");

    Channel<AudioData>* channel = JNIHandle::getHandle<Channel<AudioData>>(env, jchannel);
            Logger::printfln("Invoking post method4");

    AudioData* data = JNIHandle::getHandle<AudioData>(env, jdata);
            Logger::printfln("Invoking post method 5");

    channel->post(*data);
                Logger::printfln("Invoking post method 6");

}

WRAP(AudioData)



extern "C"
{
    /*
     * Class:     com_example_portaible_AudioData
     * Method:    subscribe
     * Signature: (Ljava/lang/String;)LChannel/Channel;
     */
    JNIEXPORT jobject JNICALL publish(JNIEnv* env, jclass, jstring channelID)
    {
        jobject channel = xpublish(env, JNIUtils::toStdString(env, channelID));
        // channel to jobject
        return channel;
    }

    JNIEXPORT void JNICALL Java_com_example_portaible_AudioData_post(JNIEnv* env, jobject data, jobject channel)
    {
                Logger::printfln("Invoking post method 2");

        post(env, channel, data);
    }

    JNIEXPORT jstring JNICALL hello (JNIEnv* env, jobject thisObject) {
        std::string hello = "Hello from registered native C++ !!";
        std::cout << hello << std::endl;
        return env->NewStringUTF(hello.c_str());
    }

    JNIEXPORT void JNICALL
    Java_com_example_portaible_AudioData_init(JNIEnv* env, jobject wrappedAudioData)
    {
        AudioData* audioData = new AudioData;
        JNIHandle::setHandle(env, wrappedAudioData, audioData);

        JNINativeMethod methods[] =
        {
  {"sayHello", "()Ljava/lang/String;", (void*) &hello },
          };
        env->RegisterNatives(env->FindClass("com/example/portaible/AudioData"), methods, 1);
    }
}